2 Player battleship game played in a terminal

after every turn, delay before screen is wiped and next player makes their move

at it's basic concept, players fill a grid with shapes, then take turns guessing grid coordinates to see if there's a shape there

needed objects


WHAT IF grid area was a dict?
playarea = {A1: Module(), A2: Module, B1: Module, B2: Module}

for row in self.length:
    for column in self.height:
        coordinate = chr(row+65) + str(column+1)
        print(playarea[coordinate])

player1.attacks("E4", Player2)
player2.gridarea["E4]


  A B
1 ~ ~
2 ~ ~

row = 0, render headers
row > 1, render contents, but first thing is numbered

play area
    - has a size (assume it's always square?)
        - list of list? I.E. a 2x2 grid is a [[0, 1], [0,1]]
        - each grid is either ocupied, or not
        - each grid is guessed, or not
        - if a grid is guessed, the contents of the grid is known.
        so each grid segment, i need to know what it holds and if the other player has guessed it to do everything with it.

        how should a grid be structured? Let's take a 3x3 grid as an example
        play area =
        [[grid, grid, grid], 
         [grid, grid, grid],
         [grid, grid, grid]]

        play area[0,1].get status = 
    - is tied to a player

grid segment
    - has a contents (empty, or occupied)
    - has a status (fired or not)
    - has a name ('E4')



to display the play area I can iterate through the play area

so assuming I'm player 1, my board would look like
    
    for row in play_area:
        for grid in row:
            print grid.contents

my enemies board would look like

    for row in play_area:
        for grid in row:
            if grid.status = fired:
                print grid.contents
            else:
                print whatever we want for a grid we haven't shot at 

General game flow

setup
    players have a set of pieces
    players indicate where they want the piece to start/end
    one player will completely place their pieces, then hand it over to another player to do the same
    once all players are done, the game phase begins

game
    at the beginning of each players turn, ask for them to hit a key to display their board status
    once confirmed, the players' board as well as what they know of the enemies board is displayed
    the player is asked which coordinate they want to fire at (ex. "E4")
    we check the contents of the enemy player's coordinate and update the board
    when they are finished, they hit a key to clear the screen and give control over to the next player.

conclusion
    when one player has no remaining ships, they lose the game
    if a player discovers the last spot, they receive a message saying they won
    the game asks if they'd like to play another or quit the program

A player has:
 A board
 a list of ships
 ID

A board has:
    length
    width
    an associated Player
    a list of modules

a module has:
    its contents
    if it has been fired upon


a ship has:
    a length
    location of all its parts


1	Carrier	    5
2	Battleship	4
3	Destroyer	3
4	Submarine	3
5	Patrol Boat	2


As a Player
I want to place my ships on a board
so that the game can start

As a player
I want to fire at an opponents ships
so I can try to find their ships and win

As a player
I want to restart the game and play again
So I can have more fun

Main Loop

Prompt to start game.
Loop while unplaced ships
    Player1.place_ship("Battleship", starting_point, Orientation)
    Updates the board with their ship
Prompts player to clear screen before player 2 goes
Loop while unplaced ships
    Player2.place_ships(blah blah)
    blah
prompts player to clear screen before start of player 1

Loop while player1 alive and player2 alive
    player1.attacks(player2, "e4")
    returns HIT or MISS
    Displays updated board
    Prompts player to hit a key to clear and pass over
    player2.attacks(player1, "e4")
    returns HIT or MISS
    Displays updated board
    Prompts player to hit a key to clear and pass over



My grid can have:
A ship that's not attacked = first letter of ship name
A ship that's attacked = !
A coordinate that's been fired on = O
All other spaces = ~

My enemy grid can have:
An unknown grid = ~
A hit = ~
a miss = O